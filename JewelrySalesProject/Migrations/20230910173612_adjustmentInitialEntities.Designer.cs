// <auto-generated />
using System;
using JewelrySalesProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JewelrySalesProject.Migrations
{
    [DbContext(typeof(JewelrySalesContext))]
    [Migration("20230910173612_adjustmentInitialEntities")]
    partial class adjustmentInitialEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JewelrySalesProject.Models.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("JewelrySalesProject.Models.Entities.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentForm")
                        .HasColumnType("int");

                    b.Property<DateTime>("PrevisionDatePayment")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SaleId");

                    b.ToTable("Parcel", (string)null);
                });

            modelBuilder.Entity("JewelrySalesProject.Models.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SaleValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("JewelrySalesProject.Models.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("FinalValue")
                        .HasColumnType("float");

                    b.Property<double>("PercentageDiscount")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShowcaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ShowcaseId");

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("JewelrySalesProject.Models.Entities.Showcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CommissionPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalInvestiment")
                        .HasColumnType("float");

                    b.Property<double>("TotalProfit")
                        .HasColumnType("float");

                    b.Property<double>("TotalSaleValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Showcase", (string)null);
                });

            modelBuilder.Entity("JewelrySalesProject.Models.Entities.Parcel", b =>
                {
                    b.HasOne("JewelrySalesProject.Models.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("JewelrySalesProject.Models.Entities.Sale", null)
                        .WithMany("Parcels")
                        .HasForeignKey("SaleId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JewelrySalesProject.Models.Entities.Product", b =>
                {
                    b.HasOne("JewelrySalesProject.Models.Entities.Sale", null)
                        .WithMany("Products")
                        .HasForeignKey("SaleId");
                });

            modelBuilder.Entity("JewelrySalesProject.Models.Entities.Sale", b =>
                {
                    b.HasOne("JewelrySalesProject.Models.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("JewelrySalesProject.Models.Entities.Showcase", null)
                        .WithMany("Sales")
                        .HasForeignKey("ShowcaseId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JewelrySalesProject.Models.Entities.Sale", b =>
                {
                    b.Navigation("Parcels");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("JewelrySalesProject.Models.Entities.Showcase", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
